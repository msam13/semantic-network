import networkx as nx
import nltk

#function to add edges to graph, it takes nounlist fnoun noun list and prenounreplacement as argument and adds edges to graphs
def addedges(noun,fnoun,pronounreplacement):
    if len(noun)==0 :
        for findex in fnoun:
            G.add_edge(nonounreplacement,k[findex][0],w=vb)
    for nindex in noun:
        if k[nindex][1] == 'PRP':
            cnoun=pronounreplacement
        else:
            cnoun=k[nindex][0]
        for findex in fnoun:
            G.add_edge(cnoun,k[findex][0],w=vb)
            

s='ABC is rich but has no money.'
G = nx.DiGraph()
sen=s.split(".")
pronounreplacement='I'
nonounreplacement='null'
for i in sen:
    k=nltk.pos_tag(nltk.word_tokenize(i))
    l=len(k)
    index=0
    noun = []
    i=0
    compound=1
    startindex=0
#---------------------------------------------------------------------------------------------------------------------    
    while compound == 1 :
        print('start')
        compound = 0
        i=startindex
        while i<l and k[i][1] != 'VBZ' and k[i][1] != 'VBN' and k[i][1] != 'VBP' and k[i][1]!= 'VBD' and k[i][1]!= 'RB':
            if k[i][1] != 'CC' and k[i]!=',':
                noun.append(i)
                if k[i][1]!='PRP':
                    pronounreplacement=k[i][0]
                    nonounreplacement=k[i][0]
                i=i+1
            else:
                i=i+1
        first=i
        for i in noun:
            print(k[i])

#---------------------------------------------------------------------------------------------------------------------
        vb=""
        v=""
        i=first
        while i<l and k[i][1]!='NNS' and k[i][1]!='NN' and k[i][1]!='NNP' and k[i][1]!='NNPS' and k[i][1]!='JJ' and k[i][1]!='JJR' and k[i][1]!='JJS':
            if k[i][0]=='are':
                v='is'
            else:
                v=k[i][0]

            if vb == '':
                vb=v
            else:
                vb=vb+"_"+v
            i=i+1
        print(vb)
        second=i
        print(second)

#---------------------------------------------------------------------------------------------------------------------    
        fnoun=[]

        if second == l :
            fnoun=noun
        else:
            i=second
            while i<l :
                if compound == 1:
                    break
                if k[i][1] == 'NNP' or k[i][1] == 'NN' or k[i][1] == 'JJ' or k[i][1] == 'NNS' or k[i][1] =='JJS' or k[i][1] =='JJR' :
                    print(k[i][0])
                    fnoun.append(i)
                    i=i+1
                elif k[i][0] == 'for' or k[i][0] =='and' or k[i][0]=='nor' or k[i][0] == 'but' or k[i][0]=='or' or k[i][0]=='yet' or k[i][0]=='so' :
                    for j in range(i,l):
                        if k[j][1]=='VBZ' or k[j][1]=='VBP' or k[j][1]=='VBD' or k[j][1]=='VBN':
                            print(j)
                            compound=1
                            addedges(noun,fnoun,pronounreplacement)
                            noun.clear()
                            fnoun.clear()
                            break
                else:
                    print(k[i][0])
                    i=i+1
        if compound==0 :
            addedges(noun,fnoun,pronounreplacement)
            break
        else:
            print(i)
            i=i+1
            startindex=i
            print(startindex)

#---------------------------------------------------------------------------------------------------------------------            

pos = nx.spring_layout(G)
#drawing
nx.draw_networkx_nodes(G, pos, node_size=700)
nx.draw_networkx_edges(G, pos, edgelist=G.edges,
                       width=6)
#labels
nx.draw_networkx_labels(G, pos, font_size=10, font_family='sans-serif')
edge_labels = nx.get_edge_attributes(G,'w')
nx.draw_networkx_edge_labels(G, pos, edge_labels, font_size=10)

#plt.axis('off')
#plt.show()
